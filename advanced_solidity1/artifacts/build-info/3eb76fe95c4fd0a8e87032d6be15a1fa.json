{
	"id": "3eb76fe95c4fd0a8e87032d6be15a1fa",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"advanced_solidity1/abstract_contracts.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >= 0.7.0 < 0.9.0;\r\n\r\n/*\r\n\r\nABSTRACT CONTRACTS\r\n\r\nAbstract Contract is one which contains at least one function without any implementation\r\nSuch as contract is used  as a base contract \r\nGenerally an abstract contract contains both implemented as well as abstract functions \r\nDerived contract will implement the abstract function  and use the existing functions as and when required\r\n\r\nbase contract vs derived contract\r\nthen we have information in that base contract that gets passed along in a derived contract\r\n= contract that inherits from the base contract \r\n\r\n*/\r\n\r\n\r\n//base contract\r\n\r\n\r\n\r\n\r\n\r\n// derived contract \r\n\r\n\r\n/*\r\nEXO\r\n\r\n1. Create an abstract base contract called Calculator with a read only public function that returns integers\r\n2. Create a derived contract called Test which derives the Calculator contract and can calculate 1 + 2 and returns the result\r\n\r\n\r\n*/"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"sources": {
			"advanced_solidity1/abstract_contracts.sol": {
				"ast": {
					"absolutePath": "advanced_solidity1/abstract_contracts.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:33:0"
						}
					],
					"src": "33:896:0"
				},
				"id": 0
			}
		}
	}
}